// Alex Latz https://github.com/AlexLatz/ProgrammingLanguages
//Basic Program Organization
program ::= statementList?

statementList ::= statement+

//Valid Statement Types
statement ::= (variableInit | assignment | fxnDeclaration | fxnCall | conditional | loop | returnStatement)
    lineEnd comment? | comment

//Language Building Blocks
//using COLLECTION as terminal to reference a pointer to a list or array of objects
// (this doesn't make sense to define with grammar as they wouldn't be written as a literal list of words)
primary ::= number | boolean | string | CHAR | COLLECTION | collectionGet | parenthesizedExpression

expression ::= primary | binaryExpression | unaryExpression

parenthesizedExpression ::= "C" expression "D"

block ::= "L" statementList? "J"

returnStatement ::= "rtrn" primary

parameters ::= parameter?

parameter ::= primary parameter?

lineEnd ::= "O" | "\n"

comment ::= "II" *

//Granular Number Definition and Parsing
number ::= "sub"? digit decimal?

decimal ::= "point" onesDigit+

//max C++ double size: roughly ten undecillion
digit ::= biggerDigits* threeDigitGroup

biggerDigits ::= threeDigitGroup digitName

digitName ::= "thousand" | "million" | "billion" | "trillion"
    | "quadrillion" | "quintillion"| "sextillion" | "septillion"
    | "octillion" | "nonillion" | "decillion" | "undecillion"

threeDigitGroup ::= hundredsDigit | tensDigit | onesDigit

hundredsDigit ::= onesDigit "hundred" tensDigit? onesDigit?

tensDigit ::= tensDigitName onesDigit?

tensDigitName ::= "ten" | "eleven" | "twelve" | "thirteen"
    | "fourteen" | "fifteen" | "sixteen" | "seventeen"
    | "eighteen" | "nineteen" | "twenty" | "thirty"
    | "forty" | "fifty" | "sixty" | "seventy"
    | "eighty" | "ninety"

onesDigit ::= "zero" | "one" | "two" | "three"
    | "four" | "five" | "six" | "seven"
    | "eight" | "nine"


//Other Type Definitions
boolean ::= "true" | "false"

string ::= "dC" " " *  " " "Db"

//Granular Expressions and Operators
binaryExpression ::= primary binaryOperator primary

unaryExpression ::= primary unaryOperator

binaryOperator ::= "be" | "add" | "sub" | "X"
    | "div" | "mod" | "addbe" | "subbe"
    | "Xbe" | "divbe" | "modbe" | condition

unaryOperator ::= "inc" | "dec"

//Boolean Expressions and Operators
condition ::= booleanExpression

booleanExpression ::= booleanOperand | booleanBinaryExp | booleanUnaryExp

booleanOperand ::= comparison | BOOL | parenthesizedBoolean

parenthesizedBoolean ::= "C" booleanExpression "D"

booleanBinaryExp ::= booleanOperand booleanBinaryOperator booleanOperand

booleanBinaryOperator ::= "and" | "or"

booleanUnaryExp ::= "not" booleanOperand


//Comparisons and Operators
comparison ::= primary comparisonOperator primary

comparisonOperator ::= "less" | "more" | "is" | "lessis" | "moreis"

//Statement Definitions
variableInit ::= "let" assignment | "let" IDENTIFIER | collectionInit

assignment ::= IDENTIFIER "be" expression

fxnDeclaration ::= "fxn" IDENTIFIER "C" parameters "D" block

fxnCall ::= IDENTIFIER "C" parameters "D"

conditional ::= conditionalOperator "C" condition "D" block

loop ::= forLoop | forEachLoop | whileLoop

//Conditional Operators
conditionalOperator ::= "if" | "elif" | "else"

//Types of Loops
forLoop ::= "for" "C" variableInit "O" condition "O" expression "D" block

forEachLoop ::= "for" "C" variableInit "in" COLLECTION "D" block

whileLoop ::= "while" "C" condition "D" block


//Collections and Usage
collectionInit ::= "let" IDENTIFIER "V" number? "A"

collectionGet ::= IDENTIFIER "V" number "A"